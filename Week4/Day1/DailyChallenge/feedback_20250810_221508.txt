URL: https://github.com/Koss-Lab/DI_Bootcamp/blob/main/Week4/Day1/DailyChallenge/OOPQuizz.py
suggestions for improvement:
- The code could include more comprehensive docstrings explaining the purpose and functionality of each method in more detail.
- Consider adding error handling (e.g., try-except blocks) to handle potential exceptions, such as incorrect input values during card creation.
Brief justification:
- correctness: The code accurately implements the `Card` and `Deck` classes as specified.  The `Deck` class correctly builds a 52-card deck, shuffles it, and deals cards one by one, removing them from the deck.  The code directly addresses all requirements in Part 2 of the Chapter Content/Questions and does not have any irrelevant functionality. The quiz answers in Part 1 are also correct and directly related to the OOP concepts discussed.
- readability: The code is well-structured and easy to follow.  Variable and method names are descriptive.  The use of list comprehensions in `build()` enhances readability.  However, more detailed docstrings would further improve readability and understanding.
- performance: The `shuffle` method rebuilds the deck if it's not 52 cards. While functionally correct, it's less efficient than checking if the deck needs to be rebuilt only once in the init method. The current implementation has a time complexity of O(n) for shuffling and O(1) for dealing, which is efficient for this task; however, for extremely large decks or frequent use cases, performance optimizations might be beneficial.  
- security: The code does not introduce any security vulnerabilities.  It uses standard Python libraries and does not interact with external resources that could pose security risks.

